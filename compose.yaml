# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    image: ma-cantine-server
    build: .
    volumes:
      - "./:/app"
      - "/app/node_modules"
    ports:
      - 8000:8000
    env_file:
      - ".env.docker"
      - path: ".env"
        required: false
    depends_on:
      db:
        condition: service_healthy
  frontend:
    build:
      context: frontend
    image: ma-cantine-front
    volumes:
      - "./frontend/:/app"
      - "/app/node_modules"
    ports:
      - 8080:8080
    env_file:
      - ".env.docker"
      - path: ".env"
        required: false
  2024-frontend:
    build:
      context: 2024-frontend
    image: ma-cantine-2024-front
    volumes:
      - "./:/app"
      - "/app/2024-frontend/node_modules"
    ports:
      - 5173:5173
    env_file:
      - ".env.docker"
      - path: ".env"
        required: false
  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ma-cantine
      PGPORT: 3306
      POSTGRES_PASSWORD: password
    ports:
      - 3306:3306
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  worker:
    image: ma-cantine-server
    env_file:
      - ".env.docker"
    command: ["celery", "-A", "macantine", "worker"]
    depends_on:
      - db
      - redis
  redis:
    image: redis:latest
volumes:
  # it's normal that this is empty, it simply defines the existance of persistent storage
  db-data:
