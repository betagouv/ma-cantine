# Generated by Django 4.1.7 on 2023-04-03 16:07

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models

import common.utils.siret


class Migration(migrations.Migration):
    dependencies = [
        ("data", "0103_alter_canteen_publication_status"),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalCanteen",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "deletion_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de suppression par l'utilisateur",
                    ),
                ),
                (
                    "import_source",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Source de l'import de la cantine",
                    ),
                ),
                ("creation_date", models.DateTimeField(blank=True, editable=False)),
                ("modification_date", models.DateTimeField(blank=True, editable=False)),
                ("name", models.TextField(verbose_name="nom")),
                ("city", models.TextField(blank=True, null=True, verbose_name="ville")),
                (
                    "city_insee_code",
                    models.TextField(blank=True, null=True, verbose_name="Code INSEE"),
                ),
                (
                    "department",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("01", "01 - Ain"),
                            ("02", "02 - Aisne"),
                            ("03", "03 - Allier"),
                            ("04", "04 - Alpes-de-Haute-Provence"),
                            ("05", "05 - Hautes-Alpes"),
                            ("06", "06 - Alpes-Maritimes"),
                            ("07", "07 - Ardèche"),
                            ("08", "08 - Ardennes"),
                            ("09", "09 - Ariège"),
                            ("10", "10 - Aube"),
                            ("11", "11 - Aude"),
                            ("12", "12 - Aveyron"),
                            ("13", "13 - Bouches-du-Rhône"),
                            ("14", "14 - Calvados"),
                            ("15", "15 - Cantal"),
                            ("16", "16 - Charente"),
                            ("17", "17 - Charente-Maritime"),
                            ("18", "18 - Cher"),
                            ("19", "19 - Corrèze"),
                            ("21", "21 - Côte-d'or"),
                            ("22", "22 - Côtes-d'armor"),
                            ("23", "23 - Creuse"),
                            ("24", "24 - Dordogne"),
                            ("25", "25 - Doubs"),
                            ("26", "26 - Drôme"),
                            ("27", "27 - Eure"),
                            ("28", "28 - Eure-et-Loir"),
                            ("29", "29 - Finistère"),
                            ("2A", "2A - Corse-du-Sud"),
                            ("2B", "2B - Haute-Corse"),
                            ("30", "30 - Gard"),
                            ("31", "31 - Haute-Garonne"),
                            ("32", "32 - Gers"),
                            ("33", "33 - Gironde"),
                            ("34", "34 - Hérault"),
                            ("35", "35 - Ille-et-Vilaine"),
                            ("36", "36 - Indre"),
                            ("37", "37 - Indre-et-Loire"),
                            ("38", "38 - Isère"),
                            ("39", "39 - Jura"),
                            ("40", "40 - Landes"),
                            ("41", "41 - Loir-et-Cher"),
                            ("42", "42 - Loire"),
                            ("43", "43 - Haute-Loire"),
                            ("44", "44 - Loire-Atlantique"),
                            ("45", "45 - Loiret"),
                            ("46", "46 - Lot"),
                            ("47", "47 - Lot-et-Garonne"),
                            ("48", "48 - Lozère"),
                            ("49", "49 - Maine-et-Loire"),
                            ("50", "50 - Manche"),
                            ("51", "51 - Marne"),
                            ("52", "52 - Haute-Marne"),
                            ("53", "53 - Mayenne"),
                            ("54", "54 - Meurthe-et-Moselle"),
                            ("55", "55 - Meuse"),
                            ("56", "56 - Morbihan"),
                            ("57", "57 - Moselle"),
                            ("58", "58 - Nièvre"),
                            ("59", "59 - Nord"),
                            ("60", "60 - Oise"),
                            ("61", "61 - Orne"),
                            ("62", "62 - Pas-de-Calais"),
                            ("63", "63 - Puy-de-Dôme"),
                            ("64", "64 - Pyrénées-Atlantiques"),
                            ("65", "65 - Hautes-Pyrénées"),
                            ("66", "66 - Pyrénées-Orientales"),
                            ("67", "67 - Bas-Rhin"),
                            ("68", "68 - Haut-Rhin"),
                            ("69", "69 - Rhône"),
                            ("70", "70 - Haute-Saône"),
                            ("71", "71 - Saône-et-Loire"),
                            ("72", "72 - Sarthe"),
                            ("73", "73 - Savoie"),
                            ("74", "74 - Haute-Savoie"),
                            ("75", "75 - Paris"),
                            ("76", "76 - Seine-Maritime"),
                            ("77", "77 - Seine-et-Marne"),
                            ("78", "78 - Yvelines"),
                            ("79", "79 - Deux-Sèvres"),
                            ("80", "80 - Somme"),
                            ("81", "81 - Tarn"),
                            ("82", "82 - Tarn-et-Garonne"),
                            ("83", "83 - Var"),
                            ("84", "84 - Vaucluse"),
                            ("85", "85 - Vendée"),
                            ("86", "86 - Vienne"),
                            ("87", "87 - Haute-Vienne"),
                            ("88", "88 - Vosges"),
                            ("89", "89 - Yonne"),
                            ("90", "90 - Territoire de Belfort"),
                            ("91", "91 - Essonne"),
                            ("92", "92 - Hauts-de-Seine"),
                            ("93", "93 - Seine-Saint-Denis"),
                            ("94", "94 - Val-de-Marne"),
                            ("95", "95 - Val-d'oise"),
                            ("971", "971 - Guadeloupe"),
                            ("972", "972 - Martinique"),
                            ("973", "973 - Guyane"),
                            ("974", "974 - La Réunion"),
                            ("976", "976 - Mayotte"),
                            ("987", "987 - Polynésie Française"),
                            ("988", "988 - Nouvelle Calédonie"),
                        ],
                        null=True,
                        verbose_name="département",
                    ),
                ),
                (
                    "region",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("01", "01 - Guadeloupe"),
                            ("02", "02 - Martinique"),
                            ("03", "03 - Guyane"),
                            ("04", "04 - La Réunion"),
                            ("06", "06 - Mayotte"),
                            ("11", "11 - Île-de-France"),
                            ("24", "24 - Centre-Val de Loire"),
                            ("27", "27 - Bourgogne-Franche-Comté"),
                            ("28", "28 - Normandie"),
                            ("32", "32 - Hauts-de-France"),
                            ("44", "44 - Grand Est"),
                            ("52", "52 - Pays de la Loire"),
                            ("53", "53 - Bretagne"),
                            ("75", "75 - Nouvelle-Aquitaine"),
                            ("76", "76 - Occitanie"),
                            ("84", "84 - Auvergne-Rhône-Alpes"),
                            ("93", "93 - Provence-Alpes-Côte d'Azur"),
                            ("94", "94 - Corse"),
                        ],
                        null=True,
                        verbose_name="région",
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="code postal"
                    ),
                ),
                (
                    "line_ministry",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("premier_ministre", "Service du Premier Ministre"),
                            (
                                "affaires_etrangeres",
                                "Ministère de l’Europe et des Affaires étrangères",
                            ),
                            ("ecologie", "Ministère de la Transition écologique"),
                            (
                                "jeunesse",
                                "Ministère de l’Education Nationale et de la Jeunesse et des Sports",
                            ),
                            (
                                "economie",
                                "Ministère de l’Economie, de la Finance et de la Relance",
                            ),
                            ("armee", "Ministère de l’Armée"),
                            ("interieur", "Ministère de l’Intérieur"),
                            (
                                "travail",
                                "Ministère Travail, de l’Emploi et de l’Insertion",
                            ),
                            ("outre_mer", "Ministère des Outre-mer"),
                            (
                                "territoires",
                                "Ministère de la Cohésion des Territoires et des Relations avec les Collectivités Territoriales",
                            ),
                            ("justice", "Ministère de la Justice"),
                            ("culture", "Ministère de la Culture"),
                            ("sante", "Ministère des Solidarités et de la Santé"),
                            ("mer", "Ministère de la Mer"),
                            (
                                "enseignement_superieur",
                                "Ministère de l’Enseignement Supérieur et de la Recherche et de l’Innovation",
                            ),
                            (
                                "agriculture",
                                "Ministère de l’Agriculture et de l’Alimentation",
                            ),
                            (
                                "transformation",
                                "Ministère de la Transformation et de la Fonction Publiques",
                            ),
                            ("autre", "Autre"),
                        ],
                        null=True,
                        verbose_name="Ministère de tutelle",
                    ),
                ),
                (
                    "daily_meal_count",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="repas par jour"
                    ),
                ),
                (
                    "yearly_meal_count",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="repas par an (y compris livrés)",
                    ),
                ),
                (
                    "satellite_canteens_count",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="nombre de cantines satellites dépendantes (si cuisine centrale)",
                    ),
                ),
                (
                    "siret",
                    models.TextField(
                        blank=True,
                        null=True,
                        validators=[common.utils.siret.validate_siret],
                    ),
                ),
                (
                    "central_producer_siret",
                    models.TextField(
                        blank=True,
                        null=True,
                        validators=[common.utils.siret.validate_siret],
                        verbose_name="siret de la cuisine centrale (si cuisine satellite)",
                    ),
                ),
                (
                    "management_type",
                    models.CharField(
                        blank=True,
                        choices=[("direct", "Directe"), ("conceded", "Concédée")],
                        max_length=255,
                        null=True,
                        verbose_name="mode de gestion",
                    ),
                ),
                (
                    "production_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("central", "Cuisine centrale sans lieu de consommation"),
                            (
                                "central_serving",
                                "Cuisine centrale qui accueille aussi des convives sur place",
                            ),
                            ("site", "Cantine qui produit les repas sur place"),
                            (
                                "site_cooked_elsewhere",
                                "Cantine qui sert des repas preparés par une cuisine centrale",
                            ),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="mode de production",
                    ),
                ),
                (
                    "logo",
                    models.TextField(
                        blank=True, max_length=100, null=True, verbose_name="Logo"
                    ),
                ),
                (
                    "economic_model",
                    models.CharField(
                        blank=True,
                        choices=[("public", "Public"), ("private", "Privé")],
                        max_length=50,
                        null=True,
                        verbose_name="Secteur économique",
                    ),
                ),
                (
                    "publication_status",
                    models.CharField(
                        choices=[("draft", "🔒 Non publié"), ("published", "✅ Publié")],
                        default="draft",
                        max_length=50,
                        verbose_name="état de publication",
                    ),
                ),
                (
                    "publication_comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="commentaires de publication",
                    ),
                ),
                (
                    "quality_comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="commentaires de mesure appro",
                    ),
                ),
                (
                    "waste_comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="commentaires de mesure gaspillage",
                    ),
                ),
                (
                    "diversification_comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="commentaires de mesure diversification",
                    ),
                ),
                (
                    "plastics_comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="commentaires de mesure plastiques",
                    ),
                ),
                (
                    "information_comments",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="commentaires de mesure information",
                    ),
                ),
                (
                    "reservation_expe_participant",
                    models.BooleanField(
                        blank=True,
                        null=True,
                        verbose_name="participnte à l'expérimentation réservation",
                    ),
                ),
                (
                    "vegetarian_expe_participant",
                    models.BooleanField(
                        blank=True,
                        null=True,
                        verbose_name="participnte à l'expérimentation repas végétariens",
                    ),
                ),
                (
                    "email_no_diagnostic_first_reminder",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date d'envoi du premier email pour manque de diagnostics",
                    ),
                ),
                ("geolocation_bot_attempts", models.IntegerField(default=0)),
                (
                    "creation_mtm_source",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="mtm_source du lien tracké lors de la création",
                    ),
                ),
                (
                    "creation_mtm_campaign",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="mtm_campaign du lien tracké lors de la création",
                    ),
                ),
                (
                    "creation_mtm_medium",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="mtm_medium du lien tracké lors de la création",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical cantine",
                "verbose_name_plural": "historical cantines",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
