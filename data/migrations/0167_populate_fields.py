# Generated by Django 5.0.13 on 2025-03-26 09:16

from django.db import migrations
import pandas as pd
import numpy as np
from macantine.etl.analysis import aggregate_col


def aggregate(df):
    try:
        df = aggregate_col(df, "bio", ["_bio"])
    except KeyError:
        pass
    try:
        df = aggregate_col(df, "sustainable", ["_label_rouge", "_aocaop_igp_stg"])
    except KeyError:
        pass
    try:
        df = aggregate_col(
            df,
            "egalim_others",
            ["_egalim_others", "_hve", "_peche_durable", "_rup", "_fermier", "_commerce_equitable"],
        )
    except KeyError:
        pass
    try:
        df = aggregate_col(df, "externality_performance", ["_performance", "_externalites"])
    except KeyError:
        pass
    df["teledeclaration.cout_denrees"] = df.apply(
        lambda row: row["teledeclaration.value_total_ht"] / row["canteen.yearly_meal_count"], axis=1
    )
    return df

def convert_queryset_to_df(teledeclarations):
    df = pd.DataFrame.from_dict(teledeclarations.values())
    if len(df):
        df.index = df['id']
        df_json = pd.json_normalize(df["declared_data"])
        df_json.index = df['id']
        return pd.concat([df.drop("declared_data", axis=1), df_json], axis=1)
    else:
        return pd.DataFrame()

def get_value_if_valid(aggregated_values, field):
    if field in aggregated_values and aggregated_values[field] and not np.isnan(aggregated_values[field]):
        return aggregated_values[field] 

def populate_aggregated_food_fields(apps, schema_editor):
    Teledeclaration = apps.get_model('data', 'Teledeclaration')
    teledeclarations = Teledeclaration.objects.all()
    if teledeclarations:
        df = convert_queryset_to_df(teledeclarations)
        df = aggregate(df)
        
        for td in teledeclarations:
            aggregated_values = df[df.id == td.id].iloc[0]
            td.value_total_ht = get_value_if_valid(aggregated_values, 'teledeclaration.value_total_ht')
            td.value_bio_ht_agg = get_value_if_valid(aggregated_values, 'teledeclaration.value_bio_ht') 
            td.value_sustainable_ht_agg = get_value_if_valid(aggregated_values, 'teledeclaration.value_sustainable_ht') 
            td.value_egalim_others_ht_agg = get_value_if_valid(aggregated_values, 'teledeclaration.value_egalim_others_ht') 
            td.value_externality_performance_ht_agg = get_value_if_valid(aggregated_values, 'teledeclaration.value_externality_performance_ht') 

            td.save()

def unpopulate_aggregated_fields(apps, schema_editor):
    Teledeclaration = apps.get_model('data', 'Teledeclaration')
    
    for td in Teledeclaration.objects.all():
        td.value_total_ht = None
        td.value_bio_ht_agg = None
        td.value_sustainable_ht_agg = None
        td.value_egalim_others_ht_agg = None
        td.value_externality_performance_ht_agg = None
        
        td.save()
class Migration(migrations.Migration):


    dependencies = [
        ("data", "0166_historicalteledeclaration_value_bio_ht_agg_and_more"),
    ]

    operations = [
        migrations.RunPython(populate_aggregated_food_fields, unpopulate_aggregated_fields)
    ]
