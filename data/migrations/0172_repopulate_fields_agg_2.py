# Generated by Django 5.0.13 on 2025-03-26 09:16

from django.db import migrations

#########################################################
# Copying functions from data.models.Diagnostic because :
# * it can't be accessed
# * it preserves the migration from any modification
def label_sum(diagnostic, label):
    families = [
        "viandes_volailles",
        "produits_de_la_mer",
        "fruits_et_legumes",
        "charcuterie",
        "produits_laitiers",
        "boulangerie",
        "boissons",
        "autres",
    ]
    sum = 0
    is_null = True
    for family in families:
        value = getattr(diagnostic, f"value_{family}_{label}")
        if value is not None:
            is_null = False
            sum = sum + value
    if not is_null:
        return sum
    
def sum_int_with_potential_null(values_to_sum):
    if all(value is None for value in values_to_sum):
        return None
    else:
        return sum(value for value in values_to_sum if value is not None)

def populate_simplified_diagnostic_values(td, diag):
    td.value_bio_ht_agg = total_label_bio(diag)
    td.value_sustainable_ht_agg = sum_int_with_potential_null([total_label_label_rouge(diag), total_label_aocaop_igp_stg(diag)])
    td.value_externality_performance_ht_agg = sum_int_with_potential_null([total_label_externalites(diag), total_label_performance(diag)])
    td.value_egalim_others_ht_agg = sum_int_with_potential_null(
        [
            total_label_hve(diag),
            total_label_peche_durable(diag),
            total_label_rup(diag),
            total_label_commerce_equitable(diag),
            total_label_fermier(diag)
        ]
    )
    return td

def populate_simple_values(td, diag):
    td.value_bio_ht_agg = diag.value_bio_ht
    td.value_sustainable_ht_agg = diag.value_sustainable_ht
    td.value_externality_performance_ht_agg = diag.value_externality_performance_ht
    td.value_egalim_others_ht_agg = diag.value_egalim_others_ht
    return td

def total_label_bio(diagnostic):
    return label_sum(diagnostic, "bio")

def total_label_label_rouge(diagnostic):
    return label_sum(diagnostic, "label_rouge")

def total_label_aocaop_igp_stg(diagnostic):
    return label_sum(diagnostic, "aocaop_igp_stg")

def total_label_hve(diagnostic):
    return label_sum(diagnostic, "hve")

def total_label_externalites(diagnostic):
    return label_sum(diagnostic, "externalites")

def total_label_performance(diagnostic):
    return label_sum(diagnostic, "performance")

def total_label_commerce_equitable(diagnostic):
    return label_sum(diagnostic, "commerce_equitable")

def total_label_fermier(diagnostic):
    return label_sum(diagnostic, "fermier")

def total_label_peche_durable(diagnostic):
    return label_sum(diagnostic, "peche_durable")

def total_label_rup(diagnostic):
    return label_sum(diagnostic, "rup")
#########################################################


def populate_aggregated_food_fields(apps, schema_editor):
    Teledeclaration = apps.get_model('data', 'Teledeclaration')
    teledeclarations = Teledeclaration.objects.select_related('diagnostic').filter(diagnostic__isnull=False)
    if teledeclarations:
        for td in teledeclarations:
            diag = td.diagnostic
            td.value_total_ht = diag.value_total_ht or 0

            if diag.diagnostic_type == 'COMPLETE':
                td = populate_simplified_diagnostic_values(td, diag)
            else:
                td = populate_simple_values(td, diag)
            td.save()

def unpopulate_aggregated_fields(apps, schema_editor):
    Teledeclaration = apps.get_model('data', 'Teledeclaration')
    
    for td in Teledeclaration.objects.all():
        td.value_total_ht = None
        td.value_bio_ht_agg = None
        td.value_sustainable_ht_agg = None
        td.value_egalim_others_ht_agg = None
        td.value_externality_performance_ht_agg = None
        
        td.save()
class Migration(migrations.Migration):


    dependencies = [
        ("data", "0171_repopulate_fields_agg_null"),
    ]

    operations = [
        migrations.RunPython(populate_aggregated_food_fields, unpopulate_aggregated_fields)
    ]
