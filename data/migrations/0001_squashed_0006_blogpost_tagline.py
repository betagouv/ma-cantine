# Generated by Django 3.2.3 on 2021-05-28 19:52

import ckeditor_uploader.fields
import data.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('data', '0001_initial'), ('data', '0002_alter_blogpost_published'), ('data', '0003_blogpost_display_date'), ('data', '0004_alter_blogpost_display_date'), ('data', '0005_alter_blogpost_display_date'), ('data', '0006_blogpost_tagline')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Photo de profil')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Canteen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(verbose_name='nom')),
                ('city', models.TextField(blank=True, null=True, verbose_name='ville')),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='code postal')),
                ('published', models.BooleanField(default=False, verbose_name='publié')),
                ('data_is_public', models.BooleanField(default=False, verbose_name='données publiques')),
                ('daily_meal_count', models.IntegerField(blank=True, null=True, verbose_name='repas par jour')),
                ('managers', models.ManyToManyField(blank=True, related_name='canteens', to=settings.AUTH_USER_MODEL, verbose_name='gestionnaires')),
            ],
            options={
                'verbose_name': 'cantine',
                'verbose_name_plural': 'cantines',
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('name', models.TextField()),
            ],
            options={
                'verbose_name': "secteur d'activité",
                'verbose_name_plural': "secteurs d'activité",
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1970), django.core.validators.MaxValueValidator(2100)])),
                ('value_bio_ht', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Bio - Valeur annuelle HT')),
                ('value_fair_trade_ht', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Commerce équitable - Valeur annuelle HT')),
                ('value_sustainable_ht', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Produits durables (hors bio) - Valeur annuelle HT')),
                ('value_total_ht', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Valeur totale annuelle HT')),
                ('has_waste_diagnostic', models.BooleanField(null=True, verbose_name='diagnostique sur le gaspillage réalisé')),
                ('has_waste_plan', models.BooleanField(null=True, verbose_name="plan d'action contre le gaspillage en place")),
                ('waste_actions', data.fields.ChoiceArrayField(base_field=models.CharField(choices=[('INSCRIPTION', 'Pré-inscription des convives obligatoire'), ('AWARENESS', 'Sensibilisation par affichage ou autre média'), ('TRAINING', 'Formation / information du personnel de restauration'), ('DISTRIBUTION', 'Réorganisation de la distribution des composantes du repas'), ('PORTIONS', 'Choix des portions (grande faim, petite faim)'), ('REUSE', 'Réutilisation des restes de préparation / surplus')], max_length=255), blank=True, null=True, size=None, verbose_name='actions contre le gaspillage en place')),
                ('has_donation_agreement', models.BooleanField(null=True, verbose_name='propose des dons alimentaires')),
                ('has_diversification_plan', models.BooleanField(null=True, verbose_name='plan de diversification en place')),
                ('vegetarian_weekly_recurrence', models.CharField(blank=True, choices=[('LOW', "Moins d'une fois par semaine"), ('MID', 'Une fois par semaine'), ('HIGH', "Plus d'une fois par semaine")], max_length=255, null=True, verbose_name='Menus végétariens par semaine')),
                ('vegetarian_menu_type', models.CharField(blank=True, choices=[('UNIQUE', 'Un menu végétarien unique'), ('SEVERAL', 'Plusieurs menus végétariens alternatifs'), ('ALTERNATIVES', "Un menu végétarien alternatif à d'autres menus non-végétariens")], max_length=255, null=True, verbose_name='Menu végétarien proposé')),
                ('cooking_plastic_substituted', models.BooleanField(null=True, verbose_name='contenants de cuisson en plastique remplacés')),
                ('serving_plastic_substituted', models.BooleanField(null=True, verbose_name='contenants de service en plastique remplacés')),
                ('plastic_bottles_substituted', models.BooleanField(null=True, verbose_name='bouteilles en plastique remplacées')),
                ('plastic_tableware_substituted', models.BooleanField(null=True, verbose_name='ustensils en plastique remplacés')),
                ('communication_supports', data.fields.ChoiceArrayField(base_field=models.CharField(choices=[('EMAIL', "Envoi d'e-mail aux convives ou à leurs représentants"), ('DISPLAY', 'Par affichage sur le lieu de restauration'), ('WEBSITE', 'Sur site internet ou intranet (mairie, cantine)'), ('OTHER', "Autres moyens d'affichage et de communication électronique")], max_length=255), blank=True, null=True, size=None, verbose_name='Communication utilisée')),
                ('communication_support_url', models.URLField(blank=True, null=True, verbose_name='Lien de communication')),
                ('comunicates_on_food_plan', models.BooleanField(null=True, verbose_name='Communique sur le plan alimentaire')),
                ('canteen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.canteen')),
            ],
            options={
                'verbose_name': 'diagnostique',
                'verbose_name_plural': 'diagnostique',
            },
        ),
        migrations.AddField(
            model_name='canteen',
            name='sectors',
            field=models.ManyToManyField(blank=True, to='data.Sector', verbose_name="secteurs d'activité"),
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(verbose_name='titre')),
                ('body', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='contenu')),
                ('published', models.BooleanField(default=False, verbose_name='publié')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='blog_posts', to=settings.AUTH_USER_MODEL, verbose_name='auteur')),
                ('display_date', models.DateField(default=django.utils.timezone.now, verbose_name='date affichée')),
                ('tagline', models.TextField(blank=True, null=True, verbose_name='description courte')),
            ],
            options={
                'verbose_name': 'article de blog',
                'verbose_name_plural': 'articles de blog',
            },
        ),
    ]
